// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        Not16(in=x, out=notx);
        And16(a=x, b=notx, out=zero);
        Mux16(a=x, b=zero, sel=zx, out=cx);
        Mux16(a=y, b=zero, sel=zy, out=cy);
        Not16(in=cx, out=notcx);
        Not16(in=cy, out=notcy);
        Mux16(a=cx, b=notcx, sel=nx, out=mx);
        Mux16(a=cy, b=notcy, sel=ny, out=my);
        And16(a=mx, b=my, out=and);
        Add16(a=mx, b=my, out=add);
        Mux16(a=and, b=add, sel=f, out=res);
        Not16(in=res, out=notres);
        Mux16(
            a=res,
            b=notres,
            sel=no,
            out[15]=out15,
            out=otherout,
            out=out
        );
        
        // ng bit
        Not(in=x[15], out=w1);
        Or(a=x[15], b=w1, out=one);
        And(a=out15, b=one, out=ng);
        
        // zr bit
        Not16(
            in=otherout, 
            out[15]=o15,
            out[14]=o14,
            out[13]=o13,
            out[12]=o12,
            out[11]=o11,
            out[10]=o10,
            out[9]=o9,
            out[8]=o8,
            out[7]=o7,
            out[6]=o6,
            out[5]=o5,
            out[4]=o4,
            out[3]=o3,
            out[2]=o2,
            out[1]=o1,
            out[0]=o0
        );
        And(a=one, b=o15, out=a1);
        And(a=a1, b=o14, out=a2);
        And(a=a2, b=o13, out=a3);
        And(a=a3, b=o12, out=a4);
        And(a=a4, b=o11, out=a5);
        And(a=a5, b=o10, out=a6);
        And(a=a6, b=o9, out=a7);
        And(a=a7, b=o8, out=a8);
        And(a=a8, b=o7, out=a9);
        And(a=a9, b=o6, out=a10);
        And(a=a10, b=o5, out=a11);
        And(a=a11, b=o4, out=a12);
        And(a=a12, b=o3, out=a13);
        And(a=a13, b=o2, out=a14);
        And(a=a14, b=o1, out=a15);
        And(a=a15, b=o0, out=zr);
}