// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A instruction first bit is 0, so need to turn to 1
    Not(in=instruction[15], out=noti);
    Or(a=noti, b=instruction[5], out=isAinstruction);
    Not(in=isAinstruction, out=isCinstruction);

    Mux16(a=aluout, b=instruction, sel=noti, out=mux1out);

    ARegister(in=mux1out, load=isAinstruction, out=aout, out[0..14]=addressM);

    Mux16(a=aout, b=inM, sel=instruction[12], out=mux2out);

    And(a=instruction[4], b=isCinstruction, out=shouldLoadDRegister);
    DRegister(in=aluout, load=shouldLoadDRegister, out=dout);

    ALU(
        x=dout,
        y=mux2out,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluout,
        out=outM,
        zr=zr,
        ng=ng
    );

    // Jump?
    Not(in=ng, out=pos);
    Not(in=zr, out=notzr);
    And(a=pos, b=instruction[0], out=ypos);
    And(a=ypos, b=notzr, out=xpos);
    And(a=zr, b=instruction[1], out=xzero);
    And(a=ng, b=instruction[2], out=xneg);
    Or(a=xpos, b=xzero, out=y1);
    Or(a=y1, b=xneg, out=jump);
    And(a=jump, b=isCinstruction, out=shouldJump);
    Not(in=shouldJump, out=shouldIncrement);

    PC(
        in=aout,
        reset=reset,
        load=shouldJump,
        inc=shouldIncrement,
        out[0..14]=pc
    );

    // C instruction and store in M both 1, then writeM is 1
    And(a=isCinstruction, b=instruction[3], out=shouldWriteM);
    Not(in=reset, out=notreset);
    And(a=shouldWriteM, b=notreset, out=writeM);

}